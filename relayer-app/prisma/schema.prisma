// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SwapDirection {
  EVM_TO_FLOW
  FLOW_TO_EVM
}

enum SwapState {
  PENDING_INITIATION
  AWAITING_INITIATOR_LOCK
  INITIATOR_LOCKED
  AWAITING_COUNTERPARTY_LOCK
  COUNTERPARTY_LOCKED
  AWAITING_INITIATOR_WITHDRAWAL // User who locked first and knows secret withdraws from counterparty's lock
  INITIATOR_WITHDREW_AND_REVEALED_SECRET
  AWAITING_COUNTERPARTY_WITHDRAWAL // Counterparty uses revealed secret to withdraw
  COMPLETED
  REFUND_INITIATED_BY_INITIATOR
  REFUND_INITIATED_BY_COUNTERPARTY
  REFUNDED_INITIATOR
  REFUNDED_COUNTERPARTY
  FAILED
}

model Swap {
  id                                 String    @id @default(cuid())
  swapId                             String    @unique
  direction                          SwapDirection
  state                              SwapState @default(PENDING_INITIATION)
  initiatorChain                     String
  initiatorAddress                   String
  initiatorToken                     String
  initiatorAmount                    String
  initiatorReceivingAddressOnOtherChain String
  counterpartyChain                  String
  counterpartyAddress                String
  counterpartyToken                  String
  counterpartyAmount                 String
  counterpartyReceivingAddressOnOtherChain String
  hashlock                           String
  secret                             String? // Optional, as it's revealed later
  evmContractAddress                 String?
  flowHtlcId                         String?
  timelocksJson                      Json?   // Or String if you store it as a stringified JSON
  transactionHashes                  Json?   // Store as JSON array of strings
  createdAt                          DateTime  @default(now())
  updatedAt                          DateTime  @updatedAt
}
